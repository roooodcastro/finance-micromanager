#!/bin/bash

trap "echo; exit" INT

: ${1?"Usage: $0 (major|minor|patch)."}

echo "Starting to create new $1 release for finance_micromanager..."

# Load current version from the VERSION file
script_location=$(dirname -- "$(readlink -f -- "$BASH_SOURCE")")
current_version=$(cat $script_location/../VERSION)

# Split the version number into its individual components
IFS='.' read -r -a array <<< "$current_version"
major=${array[0]}
minor=${array[1]}
patch=${array[2]}

# Perform the bumping of the version number
case $1 in
  major)
    current_major=$major
    major=$(expr $major + 1)
    minor=0
    patch=0
    echo "Bumping major version from $current_major to $major"
    ;;
  minor)
    current_minor=$minor
    minor=$(expr $minor + 1)
    patch=0
    echo "Bumping minor version from $current_minor to $minor"
    ;;
  patch)
    current_patch=$patch
    patch=$(expr $patch + 1)
    echo "Bumping patch version from $current_patch to $patch"
    ;;
  *)
    echo "Invalid argument. Must be either \"major\", \"minor\", or \"patch\"."
    exit 1
    ;;
esac

new_version="$major.$minor.$patch"
tag_name="v$new_version"

echo
echo "The version will be updated from $current_version to $new_version and a release will be created."

# Ask for confirmation before proceeding
read -p "Are you sure? (Y/y) " -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  echo "Aborted."
  exit 0
fi

# Start process to create the new release

# Create a new git branch to commit changes needed for the release
branch_name="release-$new_version"
git checkout -b $branch_name

# Run RSpec to get Simplecov coverage results
bundle exec rspec

# Update VERSION and coverage files
echo $new_version > $script_location/../VERSION
# Build the coverage string in the CSV format "{version},{line_coverage},{branch_coverage}" with multiple steps:
# 1. Set version as the first column
# 2. Read the results from simplecov with cat
# 3. Use jq to parse the JSON resultset and extract the line and branch coverage percentages
# 4. Use tr to transform the newline characters from jq into commas for the CSV
# 5. Use sed to remove the trailing comma
# 6. Append to the file using >>
echo "v$new_version,$(cat coverage/.last_run.json | jq '.result.line,.result.branch' | tr '\n' ',' | sed 's/,$//')" >> spec/coverage.csv

# Commit and push the release changes
git add $script_location/../VERSION spec/coverage.csv
git commit -m "Release $new_version"
git push origin $branch_name

# Create and merge the PR in GitHub for the release changes
gh pr create --title "Release $new_version" --body ""
gh pr merge -m --admin

# Go back to the main branch and delete release branch
git checkout main
git pull origin main
git branch -d $branch_name

# Push tag for the new version and create a GitHub release
git tag -a $tag_name -m "Release $tag_name"
git push origin $tag_name
gh release create $tag_name --title "Release $new_version" --latest --generate-notes


# Ask for confirmation before building new image
read -p "Do you want to build and push a new Docker image? (Y/y) " -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  echo "Skipping image build."
  echo "Done."
  exit 0
fi

bin/build
