#!/bin/bash

trap "echo; exit" INT

: ${1?"Usage: $0 (major|minor|patch)."}

# Load current version from the VERSION file
script_location=$(dirname -- "$(readlink -f -- "$BASH_SOURCE")")
current_version=$(cat $script_location/../VERSION)

# Split the version number into its individual components
IFS='.' read -r -a array <<< "$current_version"
major=${array[0]}
minor=${array[1]}
patch=${array[2]}

# Perform the bumping of the version number
case $1 in
  major)
    current_major=$major
    major=$(expr $major + 1)
    minor=0
    patch=0
    echo "Bumping major version from $current_major to $major"
    ;;
  minor)
    current_minor=$minor
    minor=$(expr $minor + 1)
    patch=0
    echo "Bumping minor version from $current_minor to $minor"
    ;;
  patch)
    current_patch=$patch
    patch=$(expr $patch + 1)
    echo "Bumping patch version from $current_patch to $patch"
    ;;
  *)
    echo "Invalid argument. Must be either \"major\", \"minor\", or \"patch\"."
    exit 1
    ;;
esac

new_version="$major.$minor.$patch"
tag_name="v$new_version"

echo "The version will be updated from $current_version to $new_version"

# Update VERSION and coverage files
echo $new_version > $script_location/../VERSION
